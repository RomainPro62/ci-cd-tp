name: CI

on: [push, workflow_dispatch]

jobs:
  install:
    runs-on: ubuntu-latest
    container:
      image: node:latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: npm ci --cache .npm --prefer-offline

  lint:
    runs-on: ubuntu-latest
    container:
      image: node:latest
    needs: install
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: npm ci --cache .npm --prefer-offline
      - run: npm run lint

  unit-test:
    runs-on: ubuntu-latest
    container:
      image: node:latest
    needs: [install, lint]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: npm ci --cache .npm --prefer-offline
      - run: npm test

  release:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    container:
      image: node:latest
    needs: [unit-test]
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN_RELEASE }}
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }} # pour valider le TP
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Marquer le repo comme sûr
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Récupérer tous les tags
        run: git fetch --tags --prune --force

      - name: Synchroniser la version locale avec le dernier tag
        run: |
          LATEST=$(git describe --tags --abbrev=0 2>/dev/null || echo 0.0.0)
          CLEAN=${LATEST#v}
          echo "Dernier tag détecté: $LATEST → version de base: $CLEAN"
          npm version "$CLEAN" --no-git-tag-version

      - run: npm ci --cache .npm --prefer-offline

      - name: Config git (email/nom)
        run: |
          git config --global user.email "${GIT_USER_EMAIL}"
          git config --global user.name  "${GIT_USER_NAME:-$GITHUB_ACTOR}"
        env:
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
          GIT_USER_NAME:  ${{ secrets.GIT_USER_NAME }}

      - name: Utiliser le token GitHub sur le remote
        run: |
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git checkout "${GITHUB_REF_NAME}"
          git pull origin "${GITHUB_REF_NAME}" --rebase

      - name: Release
        run: npx --yes release-it --ci --increment patch